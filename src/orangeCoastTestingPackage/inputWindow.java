/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package orangeCoastTestingPackage;

/**
 *
 * @author Test
 */
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.awt.Toolkit;
public class inputWindow extends javax.swing.JFrame {

    /**
     * Creates new form inputWindow
     */
    public inputWindow() {
        initComponents();
        setIcon();
        generateCurrentData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        OCLabel = new javax.swing.JLabel();
        yearField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        trackingField = new javax.swing.JTextField();
        customerLabel = new javax.swing.JLabel();
        customerField = new javax.swing.JTextField();
        colorLabel = new javax.swing.JLabel();
        colorComboBox = new javax.swing.JComboBox<>();
        startLabel = new javax.swing.JLabel();
        startMonthField = new javax.swing.JTextField();
        startMiniYear = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        startDayField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        startYearField = new javax.swing.JTextField();
        endLabel = new javax.swing.JLabel();
        endMonthField = new javax.swing.JTextField();
        endMiniYear = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        endDayField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        endYearField = new javax.swing.JTextField();
        weekendsLabel = new javax.swing.JLabel();
        weekendsSpinner = new javax.swing.JSpinner();
        enterButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        partLabel = new javax.swing.JLabel();
        partField = new javax.swing.JTextField();
        startMiniYear1 = new javax.swing.JLabel();
        getDataButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputBox = new javax.swing.JTextArea();
        customerLabel1 = new javax.swing.JLabel();
        checkBoxVT = new javax.swing.JCheckBox();
        checkBoxPT = new javax.swing.JCheckBox();
        checkBoxMT = new javax.swing.JCheckBox();
        checkBoxRT = new javax.swing.JCheckBox();
        checkBoxME = new javax.swing.JCheckBox();
        checkBoxBT = new javax.swing.JCheckBox();
        checkBoxHT = new javax.swing.JCheckBox();
        checkBoxPR = new javax.swing.JCheckBox();
        checkBoxTT = new javax.swing.JCheckBox();
        startAtLabel = new javax.swing.JLabel();
        endAtLabel = new javax.swing.JLabel();
        endHourField = new javax.swing.JTextField();
        startHourField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        startMinuteField = new javax.swing.JTextField();
        endMinuteField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        topLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        welcomeHeader = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Job Analyzer (Job Input)");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        OCLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        OCLabel.setLabelFor(yearField);
        OCLabel.setText("OC");
        OCLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        OCLabel.setFocusable(false);
        OCLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        yearField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel2.setLabelFor(yearField);
        jLabel2.setText("-");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setFocusable(false);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        trackingField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        customerLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        customerLabel.setLabelFor(yearField);
        customerLabel.setText("Customer:");
        customerLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        customerLabel.setFocusable(false);
        customerLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        customerField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        customerField.setNextFocusableComponent(colorComboBox);

        colorLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        colorLabel.setLabelFor(yearField);
        colorLabel.setText("Color:");
        colorLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        colorLabel.setFocusable(false);
        colorLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        colorComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLEAR", "BLUE", "RED" }));
        colorComboBox.setNextFocusableComponent(startMonthField);

        startLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        startLabel.setLabelFor(yearField);
        startLabel.setText("Start:");
        startLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        startLabel.setFocusable(false);
        startLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startMonthField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        startMiniYear.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        startMiniYear.setText("YYYY");

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel9.setLabelFor(yearField);
        jLabel9.setText("/");
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel9.setFocusable(false);
        jLabel9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startDayField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel10.setLabelFor(yearField);
        jLabel10.setText("/");
        jLabel10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel10.setFocusable(false);
        jLabel10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startYearField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        startYearField.setNextFocusableComponent(startHourField);

        endLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        endLabel.setLabelFor(yearField);
        endLabel.setText("End:");
        endLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        endLabel.setFocusable(false);
        endLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        endMonthField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        endMiniYear.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        endMiniYear.setText("YYYY");

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel15.setLabelFor(yearField);
        jLabel15.setText("/");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel15.setFocusable(false);
        jLabel15.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        endDayField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel16.setLabelFor(yearField);
        jLabel16.setText("/");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel16.setFocusable(false);
        jLabel16.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        endYearField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        endYearField.setNextFocusableComponent(endHourField);

        weekendsLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        weekendsLabel.setLabelFor(yearField);
        weekendsLabel.setText("Weekends:");
        weekendsLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        weekendsLabel.setFocusable(false);
        weekendsLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        weekendsSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        weekendsSpinner.setNextFocusableComponent(quantityField);

        enterButton.setText("Enter");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Last");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        partLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        partLabel.setLabelFor(yearField);
        partLabel.setText("Part #:");
        partLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        partLabel.setFocusable(false);
        partLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        partField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        startMiniYear1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        startMiniYear1.setText("(Optional)");

        getDataButton.setText("Set Parameters");
        getDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDataButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        outputBox.setEditable(false);
        outputBox.setBackground(new java.awt.Color(217, 217, 222));
        outputBox.setColumns(20);
        outputBox.setRows(5);
        outputBox.setFocusable(false);
        jScrollPane1.setViewportView(outputBox);

        customerLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        customerLabel1.setLabelFor(yearField);
        customerLabel1.setText("Departments: ");
        customerLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        customerLabel1.setFocusable(false);
        customerLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        checkBoxVT.setText("VT");

        checkBoxPT.setText("PT");

        checkBoxMT.setText("MT");

        checkBoxRT.setText("RT");

        checkBoxME.setText("ME");

        checkBoxBT.setText("BT");

        checkBoxHT.setText("HT");
        checkBoxHT.setNextFocusableComponent(checkBoxPT);

        checkBoxPR.setText("PR");
        checkBoxPR.setNextFocusableComponent(checkBoxMT);

        checkBoxTT.setText("TT");
        checkBoxTT.setNextFocusableComponent(weekendsSpinner);

        startAtLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        startAtLabel.setLabelFor(yearField);
        startAtLabel.setText("at");
        startAtLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        startAtLabel.setFocusable(false);
        startAtLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        endAtLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        endAtLabel.setLabelFor(yearField);
        endAtLabel.setText("at");
        endAtLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        endAtLabel.setFocusable(false);
        endAtLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        endHourField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        endHourField.setNextFocusableComponent(endMinuteField);

        startHourField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel11.setLabelFor(yearField);
        jLabel11.setText(":");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel11.setFocusable(false);
        jLabel11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel12.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel12.setLabelFor(yearField);
        jLabel12.setText(":");
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel12.setFocusable(false);
        jLabel12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startMinuteField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        startMinuteField.setNextFocusableComponent(endMonthField);

        endMinuteField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        endMinuteField.setNextFocusableComponent(checkBoxVT);

        quantityLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        quantityLabel.setLabelFor(yearField);
        quantityLabel.setText("Quantity:");
        quantityLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        quantityLabel.setFocusable(false);
        quantityLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        quantityField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        quantityField.setNextFocusableComponent(partField);

        jLabel1.setText("Please enter job information:");

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        welcomeHeader.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        welcomeHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeHeader.setText("Job Input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(getDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(enterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(clearButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(deleteButton)))
                            .addComponent(helpButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(weekendsLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(weekendsSpinner))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(colorLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(endLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(endMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(endDayField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(endYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(70, 70, 70)
                                                .addComponent(startMiniYear))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(startDayField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(startYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quantityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(endMiniYear)
                                .addGap(30, 30, 30)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(partLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partField))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startMiniYear1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(startAtLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(startHourField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel11))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(endAtLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(endHourField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(startMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(checkBoxMT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxBT, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxTT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkBoxVT)
                                            .addComponent(checkBoxPT))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkBoxRT)
                                            .addComponent(checkBoxME))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(checkBoxHT))
                                            .addComponent(checkBoxPR, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(customerLabel1))))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OCLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(topLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(trackingField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(customerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customerField)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxVT)
                                    .addComponent(checkBoxRT)
                                    .addComponent(checkBoxHT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxPT)
                                    .addComponent(checkBoxME)
                                    .addComponent(checkBoxPR))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxMT)
                                    .addComponent(checkBoxBT)
                                    .addComponent(checkBoxTT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startMiniYear1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(partLabel))
                                    .addComponent(partField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(startMonthField)
                                        .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startDayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10)
                                        .addComponent(startAtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startHourField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11)
                                        .addComponent(startMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startMiniYear)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(endMonthField)
                                                    .addComponent(endLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(endDayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel15)))
                                            .addComponent(endYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel16)))
                                    .addComponent(endAtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(endHourField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)
                                    .addComponent(endMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endMiniYear))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(topLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OCLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(trackingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(customerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekendsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weekendsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(quantityLabel)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(enterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Checks the formatting, prints and if its good, prints the last input to the output box. Then writes the data to the output file and updates currentData list
    //Then checks if the OC# has been used before, opening up a window to present the user with 3 options, overwrite the previous entry, input the duplicate entry
    //anyway, or to cancel the entry. Then checks if the cutsomer is a new customer or not, if so, it warns the user it may be a typo.
    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
        boolean result = goodFormat();
        if(result == false) {
            return;
        }
        printLastToOutput();
        //NOTE: When opening the new window the code DOES NOT pause

        if(enteredOCBefore()) {
            outputBox.setText("");
            String replacement = "OC" + yearField.getText().trim() + "-" + trackingField.getText().trim() + "--" + customerField.getText().trim() + "--" + "QTY: " + quantityField.getText().trim() + "--" + colorComboBoxGetText().trim()
                                + "--" + checkBoxText(checkBoxVT) + checkBoxText(checkBoxPT) + checkBoxText(checkBoxMT) + checkBoxText(checkBoxRT) + checkBoxText(checkBoxME) + checkBoxText(checkBoxBT) + checkBoxText(checkBoxHT) + checkBoxText(checkBoxPR) + checkBoxText(checkBoxTT) + "--"
                                + "START: " + startMonthField.getText().trim() + "/" + startDayField.getText().trim() + "/" + startYearField.getText().trim() + " at " + startHourField.getText().trim() + ":" + startMinuteField.getText().trim() + "--"
                                + "END: " + endMonthField.getText().trim() + "/" + endDayField.getText().trim() + "/" + endYearField.getText().trim() + " at " + endHourField.getText().trim() + ":" + endMinuteField.getText().trim() + "--"
                                + "WEEKENDS: " + weekendsSpinner.getValue() + "--" + "PART#: " + partField.getText().trim();
            warningWindow warning = new warningWindow(currentData, repeatIndex, replacement);
            warning.setVisible(true);
            System.out.println("REPEAT AT INDEX " + repeatIndex);
        }
        writeToFile();
        if(newCustomer()) {
            newCustomerWindow customerWindow = new newCustomerWindow();
            customerWindow.setVisible(true);
        }        
    }//GEN-LAST:event_enterButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearAll();
    }//GEN-LAST:event_clearButtonActionPerformed

    
    private boolean newCustomer() {
        if(currentData.isEmpty()) {
            return true;
        } else {
            for(int i = 0; i < currentData.size() - 1; i++) {
                if(customerField.getText().trim().equalsIgnoreCase(currentData.get(i).split("--")[1])) {
                    return false;
                }
            }
            return true;
        }
    }
    
    //Deletes the last thing that the user entered and prints the deleted 
    //to the output box
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteLast();
    }//GEN-LAST:event_deleteButtonActionPerformed

    //Prints the entry that was last deleted to the output box
    private void printLastDeleted(String last) {
        outputBox.setText("");
        String[] all = last.split("--");
        outputBox.append("DELETED:\n"); 
        outputBox.append(all[0] + "\n");
        outputBox.append("CUSTOMER: " + all[1] + "\n");
        outputBox.append("COLOR: " + all[3] + "\n");
        outputBox.append(all[2] + "\n");
        outputBox.append("DEPARTMENTS: " + all[4] + "\n");
        outputBox.append(all[5] + "\n");
        outputBox.append(all[6] + "\n");
        outputBox.append(all[7] + "\n");
        outputBox.append(all[8] + "\n");
    }
    
    //Opens a parameterWindow
    private void getDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDataButtonActionPerformed
        this.setVisible(false);
        this.dispose();
        parameterWindow other = new parameterWindow();
        other.setVisible(true);
    }//GEN-LAST:event_getDataButtonActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        generateCurrentData();
    }//GEN-LAST:event_formWindowGainedFocus

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        inputHelpWindow help = new inputHelpWindow();
        help.setVisible(true);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        
    }//GEN-LAST:event_formWindowLostFocus

    //Checks if the OC number the user is trying to enter has been entered before returns
    //true if so, false otherwise
    private boolean enteredOCBefore() {
        try{
            String userName = System.getProperty("user.name");
            String destination = "C:/Users/" + userName + "/jobAnalyzerDataStorage.txt";
            Scanner input = new Scanner(new File(destination));
            repeatIndex = 0;
            while(input.hasNextLine()) {
                if(("OC" + yearField.getText().trim() + "-" + trackingField.getText().trim()).equals(input.nextLine().split("--")[0])) {
                    return true;
                }
                repeatIndex++;
            }
        } catch (IOException e) {
            topLabel.setText(e.toString());
        }
        return false;
    }
    
    private String colorComboBoxGetText() {
        if(colorComboBox.getSelectedIndex() == 0) {
            return "CLEAR";
        } else if(colorComboBox.getSelectedIndex() == 1) {
            return "BLUE";
        } else {
            return "RED";
        }
    }
    
    private void deleteLast() {
                
        //Reading data file
        dataForDelete = new ArrayList<String>();
        try{
            String readUserName = System.getProperty("user.name");
            String readDestination = "C:/Users/" + readUserName + "/jobAnalyzerDataStorage.txt";
            Scanner input = new Scanner(new File(readDestination));
            while(input.hasNextLine()) {
                String text = input.nextLine();
                if(text.length() != 0) {
                    dataForDelete.add(text);
                }
            }
        } catch(IOException e) {
            topLabel.setText(e.toString());
        }
        printLastDeleted(dataForDelete.get(dataForDelete.size() - 1));
        //Overwriting file
        try{
            String writeDestination = "";
            String writeUserName = System.getProperty("user.name");
            writeDestination = "C:/Users/" + writeUserName + "/jobAnalyzerDataStorage.txt";
            Writer fileWriter = new FileWriter(writeDestination);
            for(int i = 0; i < dataForDelete.size() - 1; i++) {
                fileWriter.write(dataForDelete.get(i) + "\n");
            }
            fileWriter.close();
        } catch(IOException e) {
            topLabel.setText(e.toString());
        }
        currentData.remove(currentData.size() - 1);
    }

    //Writes the inputed data to the storage file, separate pieces of data split by |
    private void writeToFile() {
        String userName = System.getProperty("user.name");
        String destination = "C:/Users/" + userName + "/jobAnalyzerDataStorage.txt";
        File log = new File(destination);
        try{
            if(log.exists() == false) {
                topLabel.setText("New storage file created succesfully");
                boolean result = log.createNewFile();
                if(result == false) {
                    topLabel.setText("ERROR: FILE CREATION FAIL");
                }
            }
            PrintWriter out = new PrintWriter(new FileWriter(log, true));
            //Printing OC#
            out.append("OC" + yearField.getText().trim() + "-" + trackingField.getText().trim() + "--");
            //Printing customer name
            out.append(customerField.getText().trim() + "--");
            //Printing quantity
            out.append("QTY: " + quantityField.getText().trim() + "--");
            //Printing color
            if(colorComboBox.getSelectedIndex() == 0) {
                out.append("CLEAR" + "--");
            } else if(colorComboBox.getSelectedIndex() == 1) {
                out.append("BLUE" + "--");
            } else {
                out.append("RED" + "--");
            }
            //Printing departments
            out.append(checkBoxText(checkBoxVT) + checkBoxText(checkBoxPT) + checkBoxText(checkBoxMT) + checkBoxText(checkBoxRT) + checkBoxText(checkBoxME) + 
                       checkBoxText(checkBoxBT) + checkBoxText(checkBoxHT) + checkBoxText(checkBoxPR) + checkBoxText(checkBoxTT) + "--");
            //Printing start
            out.append("START: " + getTextStandardize(startMonthField.getText().trim()) + "/" + getTextStandardize(startDayField.getText().trim()) + "/" + startYearField.getText().trim()
                       + " at " + getTextStandardize(startHourField.getText().trim()) + ":" + startMinuteField.getText().trim() + "--");
            //Printing end
            out.append("END: " + getTextStandardize(endMonthField.getText().trim()) + "/" + getTextStandardize(endDayField.getText().trim()) + "/" + endYearField.getText().trim()
                       + " at " + getTextStandardize(endHourField.getText().trim()) + ":" + endMinuteField.getText().trim() + "--");
            //Printing weekend
            out.append("WEEKENDS: " + weekendsSpinner.getValue() + "--");
            //Printing part#
            out.append("PART#: " + partField.getText().trim());
            //New line
            out.append("\n");
            out.close();
        } catch (IOException e) {
            topLabel.setText(e.toString());
        }
        generateCurrentData();
    }

    private String getTextStandardize(String input) {
        return String.valueOf(Integer.parseInt(input));
    }
    
    //Called by clear button and sets all field to empty
    private void clearAll() {
        //Clearing Fields
        yearField.setText("");
        trackingField.setText("");
        customerField.setText("");
        startMonthField.setText("");
        startDayField.setText("");
        startYearField.setText("");
        startHourField.setText("");
        startMinuteField.setText("");
        endMonthField.setText("");
        endDayField.setText("");
        endYearField.setText("");
        endHourField.setText("");
        endMinuteField.setText("");
        quantityField.setText("");
        partField.setText("");
        //Setting spinner to 0
        weekendsSpinner.setValue(0);
        //Unselecting check boxes
        checkBoxVT.setSelected(false);
        checkBoxPT.setSelected(false);
        checkBoxMT.setSelected(false);
        checkBoxRT.setSelected(false);
        checkBoxME.setSelected(false);
        checkBoxBT.setSelected(false);
        checkBoxHT.setSelected(false);
        checkBoxPR.setSelected(false);
        checkBoxTT.setSelected(false);
        //Clearing Top Label
        topLabel.setText("");
    }
    
    
    //Post: Checks if the data has been inputted correctly, and returns true if so, false otherwise
    private boolean goodFormat() {
        try{
            //OC# Check
            checkString(yearField.getText().trim(), 2);
            checkString(trackingField.getText().trim(), 4);
            //Start Date Check
            checkStringMulti(startMonthField.getText().trim(), 1, 2);
            checkStringMulti(startDayField.getText().trim(), 1, 2);
            checkString(startYearField.getText().trim(), 4);
            checkStringMulti(startHourField.getText().trim(), 1, 2);
            checkString(startMinuteField.getText().trim(), 2);
            if(Integer.parseInt(startMonthField.getText().trim()) > 12) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(startHourField.getText().trim()) > 12) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(startMinuteField.getText().trim()) > 59) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(startDayField.getText().trim()) > 31) {
                throw new IllegalArgumentException("hi");
            }
            //End Date Check
            checkStringMulti(endMonthField.getText().trim(), 1, 2);
            checkStringMulti(endDayField.getText().trim(), 1, 2);
            checkString(endYearField.getText().trim(), 4);
            checkStringMulti(endHourField.getText().trim(), 1, 2);
            checkString(endMinuteField.getText().trim(), 2);
            if(Integer.parseInt(endMonthField.getText().trim()) > 12) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(endHourField.getText().trim()) > 12) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(endMinuteField.getText().trim()) > 59) {
                throw new IllegalArgumentException("hi");
            }
            if(Integer.parseInt(endDayField.getText().trim()) > 31) {
                throw new IllegalArgumentException("hi");
            }
            //Quantity Check
            checkString4(quantityField.getText().trim(), 1, 2, 3, 4);
        } catch(Exception e) {
            outputBox.setText("ERROR:\nPLEASE CHECK FORMATTING AND TRY AGAIN");
            return false;
        }
        return true;
    }
    
    //Checks that the string is an integer with the correct number of digits
    private void checkString(String str, int desiredLength) {
        if(str.length() != desiredLength) {
            throw new IllegalArgumentException("hi");
        }
        Integer.parseInt(str);
    }
    
    //Checks that the string is an integer with number of digits of one of 2 possibilities
    private void checkStringMulti(String str, int desiredLength1, int desiredLength2) {
        if(str.length() == desiredLength1) {
            
        } else if(str.length() == desiredLength2){
            
        } else {
            throw new IllegalArgumentException("hi");
        }
        Integer.parseInt(str);
    }
    
    //Same as other check strings but with 4 possibilities
    private void checkString4(String str, int desiredLength1, int desiredLength2, int desiredLength3, int desiredLength4) {
        if(str.length() == desiredLength1) {
            
        } else if(str.length() == desiredLength2) {
            
        } else if(str.length() == desiredLength3) {
            
        } else if(str.length() == desiredLength4) {
            
        } else {
            throw new IllegalArgumentException("hi");
        }
        Integer.parseInt(str);
    }
    
    //Prints the last entered thing into the output
    private void printLastToOutput() {
        outputBox.setText("LAST ENTRY:\nOC" + yearField.getText().trim() + "-" + trackingField.getText().trim() + "\n" + "CUSTOMER: " + customerField.getText().trim()
                          + "\n" + "COLOR: " + colorComboBox.getSelectedItem() + "\n" + "QTY: " + quantityField.getText().trim() + "\n" + "DEPARTMENTS: " + checkBoxText(checkBoxVT) 
                          + checkBoxText(checkBoxPT) + checkBoxText(checkBoxMT) + checkBoxText(checkBoxRT) + checkBoxText(checkBoxME) 
                          + checkBoxText(checkBoxBT) + checkBoxText(checkBoxHT) + checkBoxText(checkBoxPR) + checkBoxText(checkBoxTT) + "\n"
                          + "START: " + startMonthField.getText().trim() + "/" + startDayField.getText().trim() + "/"
                          + startYearField.getText().trim() + " at " + startHourField.getText().trim() + ":" + startMinuteField.getText().trim() 
                          + "\n" + "END: " + endMonthField.getText().trim() + "/" + endDayField.getText().trim() + "/"
                          + endYearField.getText().trim() + " at " + endHourField.getText().trim() + ":" + endMinuteField.getText().trim()
                          + "\n" + "WEEKENDS: " + weekendsSpinner.getValue() + "\n" + "PART#: " + partField.getText().trim());
        
    }
    
    //Post: Returns the checkbox text if its selected, and returns an empty string if not selected
    private String checkBoxText(JCheckBox box) {
        if(box.isSelected()) {
            return box.getText().trim() + " ";
        } else {
            return "";
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inputWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inputWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel OCLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxBT;
    private javax.swing.JCheckBox checkBoxHT;
    private javax.swing.JCheckBox checkBoxME;
    private javax.swing.JCheckBox checkBoxMT;
    private javax.swing.JCheckBox checkBoxPR;
    private javax.swing.JCheckBox checkBoxPT;
    private javax.swing.JCheckBox checkBoxRT;
    private javax.swing.JCheckBox checkBoxTT;
    private javax.swing.JCheckBox checkBoxVT;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> colorComboBox;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JTextField customerField;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JLabel customerLabel1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel endAtLabel;
    private javax.swing.JTextField endDayField;
    private javax.swing.JTextField endHourField;
    private javax.swing.JLabel endLabel;
    private javax.swing.JLabel endMiniYear;
    private javax.swing.JTextField endMinuteField;
    private javax.swing.JTextField endMonthField;
    private javax.swing.JTextField endYearField;
    private javax.swing.JButton enterButton;
    private javax.swing.JButton getDataButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputBox;
    private javax.swing.JTextField partField;
    private javax.swing.JLabel partLabel;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel startAtLabel;
    private javax.swing.JTextField startDayField;
    private javax.swing.JTextField startHourField;
    private javax.swing.JLabel startLabel;
    private javax.swing.JLabel startMiniYear;
    private javax.swing.JLabel startMiniYear1;
    private javax.swing.JTextField startMinuteField;
    private javax.swing.JTextField startMonthField;
    private javax.swing.JTextField startYearField;
    private javax.swing.JLabel topLabel;
    private javax.swing.JTextField trackingField;
    private javax.swing.JLabel weekendsLabel;
    private javax.swing.JSpinner weekendsSpinner;
    private javax.swing.JLabel welcomeHeader;
    private javax.swing.JTextField yearField;
    // End of variables declaration//GEN-END:variables
    //My own fields
    private int repeatIndex;
    private List<String> dataForDelete; //this is the list for deleting last
    private List<String> currentData; //This is the current, up to date list that is constantly
                              //kept updated and should always be the exact same as 
                              //the data storage file
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("graphIcon.png")));
    }

    private void generateCurrentData() {
        String userName = System.getProperty("user.name");
        String destination = "C:/Users/" + userName + "/jobAnalyzerDataStorage.txt";
        File check = new File(destination);
        
        if(check.exists()){
            currentData = new ArrayList<String>();
            try {
                Scanner input = new Scanner(new File(destination));
                while(input.hasNextLine()) {
                    String text = input.nextLine();
                    if(text.length() != 0) {
                        currentData.add(text);
                    }
                }
            } catch(IOException e) {
                topLabel.setText(e.toString());
            }
        } else {
            return;
        }
    }
}
