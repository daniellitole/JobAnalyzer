/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package orangeCoastTestingPackage;

/**
 *
 * @author Test
 */
import java.awt.Toolkit;
import java.util.*;
import java.io.*;
import javax.swing.*;
public class parameterWindow extends javax.swing.JFrame {

    /**
     * Creates new form parameterWindow
     */
    public parameterWindow() {
        initComponents();
        setIcon();
        dataToList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        customerLabel = new javax.swing.JLabel();
        customerField = new javax.swing.JTextField();
        customerLabel1 = new javax.swing.JLabel();
        checkBoxVT = new javax.swing.JCheckBox();
        checkBoxPT = new javax.swing.JCheckBox();
        checkBoxMT = new javax.swing.JCheckBox();
        checkBoxRT = new javax.swing.JCheckBox();
        checkBoxME = new javax.swing.JCheckBox();
        checkBoxBT = new javax.swing.JCheckBox();
        checkBoxHT = new javax.swing.JCheckBox();
        checkBoxPR = new javax.swing.JCheckBox();
        checkBoxTT = new javax.swing.JCheckBox();
        partLabel = new javax.swing.JLabel();
        partField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        colorLabel = new javax.swing.JLabel();
        colorComboBox = new javax.swing.JComboBox<>();
        messageLabel = new javax.swing.JLabel();
        saveCheckBox = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        startDayField2 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        startYearField2 = new javax.swing.JTextField();
        startDateLabel = new javax.swing.JLabel();
        startMonthField1 = new javax.swing.JTextField();
        startMiniYear = new javax.swing.JLabel();
        startMiniDay = new javax.swing.JLabel();
        startMiniMonth = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        startDayField1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        startYearField1 = new javax.swing.JTextField();
        startMonthField2 = new javax.swing.JTextField();
        endMiniYear = new javax.swing.JLabel();
        endMiniDay = new javax.swing.JLabel();
        endMiniMonth = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        toLabel = new javax.swing.JLabel();
        welcomeHeader = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Job Analyzer (Graph Parameters)");
        setPreferredSize(new java.awt.Dimension(696, 415));
        setResizable(false);

        backButton.setText("Back");
        backButton.setFocusable(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        customerLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        customerLabel.setText("Customer:");
        customerLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        customerLabel.setFocusable(false);
        customerLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        customerField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        customerLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        customerLabel1.setText("Departments: ");
        customerLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        customerLabel1.setFocusable(false);
        customerLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        checkBoxVT.setText("VT");

        checkBoxPT.setText("PT");

        checkBoxMT.setText("MT");

        checkBoxRT.setText("RT");

        checkBoxME.setText("ME");

        checkBoxBT.setText("BT");

        checkBoxHT.setText("HT");

        checkBoxPR.setText("PR");

        checkBoxTT.setText("TT");

        partLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        partLabel.setText("Part #:");
        partLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        partLabel.setFocusable(false);
        partLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        partField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        generateButton.setText("Generate Chart");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        colorLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        colorLabel.setText("Color:");
        colorLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        colorLabel.setFocusable(false);
        colorLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        colorComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ANY", "CLEAR", "BLUE", "RED" }));

        messageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(255, 51, 51));

        saveCheckBox.setText("Save graph as PNG?");

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel15.setText("/");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel15.setFocusable(false);
        jLabel15.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startDayField2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel16.setText("/");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel16.setFocusable(false);
        jLabel16.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startYearField2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        startDateLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        startDateLabel.setText("Start Date:");
        startDateLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        startDateLabel.setFocusable(false);
        startDateLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startMonthField1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        startMiniYear.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        startMiniYear.setText("YYYY");

        startMiniDay.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        startMiniDay.setText("DD");

        startMiniMonth.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        startMiniMonth.setText("MM");

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel9.setText("/");
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel9.setFocusable(false);
        jLabel9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startDayField1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel10.setText("/");
        jLabel10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel10.setFocusable(false);
        jLabel10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        startYearField1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        startMonthField2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        endMiniYear.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        endMiniYear.setText("YYYY");

        endMiniDay.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        endMiniDay.setText("DD");

        endMiniMonth.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        endMiniMonth.setText("MM");

        jLabel1.setText("Please enter parameters to filter data sorting:");

        helpButton.setText("Help");
        helpButton.setFocusable(false);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        toLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        toLabel.setText("to ");
        toLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        toLabel.setFocusable(false);
        toLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        welcomeHeader.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        welcomeHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeHeader.setText("Parameter Input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backButton)
                .addGap(113, 113, 113)
                .addComponent(welcomeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(startDateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startMonthField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(startMiniMonth)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(startMiniDay)
                                .addGap(48, 48, 48)
                                .addComponent(startMiniYear))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startDayField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startYearField1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startMonthField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(endMiniMonth)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(endMiniDay)
                                .addGap(48, 48, 48)
                                .addComponent(endMiniYear))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(startDayField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startYearField2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(colorLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(partLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(partField, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBoxMT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxBT, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxTT))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxVT)
                                    .addComponent(checkBoxPT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxRT)
                                    .addComponent(checkBoxME))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxHT))
                                    .addComponent(checkBoxPR, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(customerLabel1))
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(helpButton)
                                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveCheckBox))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(customerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(customerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(partLabel)
                            .addComponent(partField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(startMonthField1)
                                        .addComponent(startDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(startDayField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startYearField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startMiniYear)
                                    .addComponent(startMiniDay)
                                    .addComponent(startMiniMonth)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(startMonthField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(startDayField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel15))
                                        .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(startYearField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(endMiniMonth)
                                    .addComponent(endMiniDay)
                                    .addComponent(endMiniYear))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customerLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxVT)
                            .addComponent(checkBoxRT)
                            .addComponent(checkBoxHT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxPT)
                            .addComponent(checkBoxME)
                            .addComponent(checkBoxPR))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxMT)
                            .addComponent(checkBoxBT)
                            .addComponent(checkBoxTT))
                        .addGap(11, 11, 11)
                        .addComponent(saveCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(helpButton)
                        .addGap(43, 43, 43))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        this.dispose();
        inputWindow other = new inputWindow();
        other.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    //Does the sorting of the list, by setting values for customer, part#, and departments for the purposes of 
    //comparisson to List
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        boolean result = goodFormat();
        if(result == false) {
            return;
        }
        //Getting departments (null if none selected)
        String departmentNames = checkBoxText(checkBoxVT) + checkBoxText(checkBoxPT) + checkBoxText(checkBoxMT) + checkBoxText(checkBoxRT) + checkBoxText(checkBoxME) + 
                          checkBoxText(checkBoxBT) + checkBoxText(checkBoxHT) + checkBoxText(checkBoxPR) + checkBoxText(checkBoxTT); 
        //Getting customer name (null if blank)
        String customerName = customerField.getText().trim();
        //Getting part number (null if blank)
        String partNumber = "PART#: " + partField.getText().trim();
        //Getting Color Combo box 
        String color = "";
        if(colorComboBox.getSelectedIndex() == 1) {
            color = "CLEAR";
        } else if(colorComboBox.getSelectedIndex() == 2) {
            color = "BLUE";
        } else if(colorComboBox.getSelectedIndex() == 3) {
            color = "RED";
        }
        //Iterate through the list
        sortedData = new ArrayList<String>();
        for(int i = 0; i < rawData.size(); i++){
            String[] splitDataPoint = rawData.get(i).split("--");
            //Checking customer
            boolean customerResult = compare(customerName, splitDataPoint[1]);
            //Checking departments
            boolean departmentResult = compare(departmentNames, splitDataPoint[4]);
            //Checking part number
            boolean partNumberResult = comparePart(partNumber, splitDataPoint[8]);
            //Checking traveler color
            boolean colorResult = compare(color, splitDataPoint[3]);
            //Checking start date
            boolean dateResult = compareStartDate(splitDataPoint[5]);
            if(customerResult && departmentResult && partNumberResult && colorResult && dateResult) {
                sortedData.add(rawData.get(i));
            }
        }
        if(sortedData.isEmpty()) {
            messageLabel.setText("NO JOB MATCHES FOUND, PLEASE TRY AGAIN");
            return;
        }
        orderData();
        calculateMinutes();
        calculateMovingRanges();
        createGraph();
        messageLabel.setText("");
    }//GEN-LAST:event_generateButtonActionPerformed
    
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        parameterHelpWindow help = new parameterHelpWindow();
        help.setVisible(true);
    }//GEN-LAST:event_helpButtonActionPerformed
    
    private boolean compareStartDate(String input) {
        if(startMonthField1.getText().trim().equals("") && startDayField1.getText().trim().equals("") && startYearField1.getText().trim().equals("") && startMonthField2.getText().trim().equals("") && startDayField2.getText().trim().equals("") && startYearField2.getText().trim().equals("")) {
            return true;
        }
        String storageDate = input.split(" at ")[0].split(": ")[1];
        int storageMonth = Integer.parseInt(storageDate.split("/")[0]);
        int storageDay = Integer.parseInt(storageDate.split("/")[1]);
        int storageYear = Integer.parseInt(storageDate.split("/")[2]);
        int userMonth1 = Integer.parseInt(startMonthField1.getText().trim());
        int userMonth2 = Integer.parseInt(startMonthField2.getText().trim());
        int userDay1 = Integer.parseInt(startDayField1.getText().trim());
        int userDay2 = Integer.parseInt(startDayField2.getText().trim());
        int userYear1 = Integer.parseInt(startYearField1.getText().trim());
        int userYear2 = Integer.parseInt(startYearField2.getText().trim());
        int storageDateFinal = (storageYear * 365) + (storageMonth * 31) + storageDay;
        int userDate1 = (userYear1 * 365) + (userMonth1 * 31) + userDay1;
        int userDate2 = (userYear2 * 365) + (userMonth2 * 31) + userDay2;
        return (storageDateFinal >= userDate1 && storageDateFinal <= userDate2);
        
    }
    
    //Checks for formatting issues in the date fields
    private boolean goodFormat() {
        try{
            checkDateSameBehavior();
            //Start Date Check
            checkStringTextMulti(startMonthField1.getText().trim(), 0, 1, 2);
            checkStringNumber(startMonthField1.getText().trim());
            checkStringTextMulti(startDayField1.getText().trim(), 0, 1, 2);
            checkStringNumber(startDayField1.getText().trim());
            checkStringText2(startYearField1.getText().trim(), 0, 4);
            checkStringNumber(startYearField1.getText().trim());
            //End Date Check
            checkStringTextMulti(startMonthField2.getText().trim(), 0, 1, 2);
            checkStringNumber(startMonthField2.getText().trim());
            checkStringTextMulti(startDayField2.getText().trim(), 0, 1, 2);
            checkStringNumber(startDayField2.getText().trim());
            checkStringText2(startYearField2.getText().trim(), 0, 4);
            checkStringNumber(startYearField2.getText().trim());
        } catch(Exception e) {
            messageLabel.setText("ERROR: PLEASE CHECK FORMATTING AND TRY AGAIN");
            return false;
        }
        return true;
    }
    
    private void checkDateSameBehavior() {
        boolean test = true;
        if(startMonthField1.getText().trim().equals("") || startDayField1.getText().trim().equals("") || startYearField1.getText().trim().equals("") || startMonthField2.getText().trim().equals("") || startDayField2.getText().trim().equals("") || startYearField2.getText().trim().equals("")) {
            test = (startMonthField1.getText().trim().equals("") && startDayField1.getText().trim().equals("") && startYearField1.getText().trim().equals("") && startMonthField2.getText().trim().equals("") && startDayField2.getText().trim().equals("") && startYearField2.getText().trim().equals(""));
        } else {
            test = true;
        }
        if(test) {
            return;
        } else {
            throw new IllegalArgumentException("hi");
        }
        
    }
    
    
    //Checks the given string formatting, against null, and one other desired string length (null corresponds to empty)
    //Also checks that only numbers have been typed by trying to parse an int
    private void checkStringText2(String str, int desiredLength1, int desiredLength2) {
        if(str.length() == desiredLength1) {
            
        } else if(str.length() == desiredLength2) {
            
        } else {
            throw new IllegalArgumentException("hi");
        }
    }

    
    //Checks the given string formatting, against null and tw other desired string lengths (null corresponds to empty)
    //Also checks that only numbers have been typed by trying to parse an int
    private void checkStringTextMulti(String str, int desiredLength1, int desiredLength2, int desiredLength3) {
        if(str.length() == desiredLength1) {
            
        } else if(str.length() == desiredLength2){
            
        } else if(str.length() == desiredLength3) {
            
        } else {
            throw new IllegalArgumentException("hi");
        }
    }
    
    private void checkStringNumber(String str) {
        if(str.equals("")) {
            return;
        }
        Integer.parseInt(str);
    }
    
    private void calculateMovingRanges() {
        movingRanges = new int[minutes.size() - 1];
        int movingRange = 0;
        for(int i = 0; i < minutes.size() - 1; i++) {
            Integer current = (Integer) minutes.get(i);
            Integer next = (Integer) minutes.get(i + 1);
            int currentInt = current.intValue();
            int nextInt = next.intValue();
            movingRange = current - next;
            if(movingRange < 0) {
                movingRange = movingRange * -1;
            }
            movingRanges[i] = movingRange;
        }
    }
    
    //Generates the Line graph associate with the orderedData and minutes lists
    private void createGraph() {
        boolean saveChart = false;
        if(saveCheckBox.isSelected()) {
            saveChart = true;
        }
        MultiLineChart line = new MultiLineChart(orderedData, minutes, movingRanges, saveChart, colorComboBox.getSelectedIndex());
        line.setVisible(true);
    }
    
    
    private void calculateMinutes() {
        minutes = new ArrayList<Integer>();
        int[] daysByMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        int dayTime = 510;
        int jobTime = 0;
        int addTime = 0;
        for(int i = 0; i < orderedData.size(); i++) {
            //Parsing int data from the string
            String startAll = orderedData.get(i).split("--")[5];
            String endAll = orderedData.get(i).split("--")[6];
            int weekends = Integer.parseInt(orderedData.get(i).split("--")[7].split(": ")[1]);
            int startMonth = Integer.parseInt(startAll.split(" at ")[0].split(": ")[1].split("/")[0]);
            int startDay = Integer.parseInt(startAll.split(" at ")[0].split(": ")[1].split("/")[1]);
            int startYear = Integer.parseInt(startAll.split(" at ")[0].split(": ")[1].split("/")[2]);
            int startHour = Integer.parseInt(startAll.split(" at ")[1].split(":")[0]);
            int startMinute = Integer.parseInt(startAll.split(" at ")[1].split(":")[1]);
            int endMonth = Integer.parseInt(endAll.split(" at ")[0].split(": ")[1].split("/")[0]);
            int endDay = Integer.parseInt(endAll.split(" at ")[0].split(": ")[1].split("/")[1]);
            int endYear = Integer.parseInt(endAll.split(" at ")[0].split(": ")[1].split("/")[2]);
            int endHour = Integer.parseInt(endAll.split(" at ")[1].split(":")[0]);
            int endMinute = Integer.parseInt(endAll.split(" at ")[1].split(":")[1]);
            //Changing to 12-hour clock
            if(startHour < 7) {
                startHour = startHour + 12;
            }
            if(endHour < 7) {
                endHour = endHour + 12;
            }
            //addTime check
            if(startHour < 8 && startHour > 5) {
                addTime += ((7 - startHour) * 60) + (60 - startMinute);
            }
            if(endHour == 4 && endMinute > 30) {
                addTime += endMinute - 30;
            } else if(endHour > 4 && endHour < 7) {
                addTime += ((endHour - 4) * 60) + (endMinute - 30);
            }
            //Leap year check
            if(startYear % 4 == 0) {
                daysByMonth[1] = 29;
            }
            if(startMonth == endMonth) {
                jobTime = sameMonth(weekends, addTime, startDay, startHour, startMinute, endDay, endHour, endMinute, jobTime, dayTime, daysByMonth);
            } else {
                jobTime = differentMonth(weekends, addTime, startMonth, startDay, startHour, startMinute, 
                          endMonth, endDay, endHour, endMinute, jobTime, dayTime, daysByMonth);
            }
            minutes.add(jobTime);
        }
    }
    
    //Does the logic for calculating jobTime when the start and end dates are in 
    //different months
    private int differentMonth(int weekends, int addTime, int startMonth, int startDay, int startHour, int startMinute, int endMonth, int endDay, int endHour, int endMinute, int jobTime, int dayTime, int[] daysByMonth) {
        int daysInStartMonth = daysByMonth[startMonth - 1];
        int dayStartMinute = 480;
        int dayEndMinute = 990;
        List<Integer> betweenMonthsDays = new ArrayList<Integer>();
        //multi-month check
        for(int i = startMonth + 1; i < endMonth; i++) {
            betweenMonthsDays.add(daysByMonth[i - 1]);
        }
        int betweenTotal = 0;
        if(!betweenMonthsDays.isEmpty()) {
            for(int i = 0; i < betweenMonthsDays.size(); i++) {
                betweenTotal += betweenMonthsDays.get(i);
            }
        }
        //Calculation
        jobTime = ((daysInStartMonth - startDay) * 510) + (dayEndMinute - ((startHour * 60) + startMinute)) + ((endDay - 1) * dayTime) + (((endHour * 60) + endMinute) - dayStartMinute);
        jobTime = jobTime - (dayTime * 2 * weekends);
        jobTime += addTime;
        return jobTime;
    }
    
    //Does the logic for calculating jobTime when the start and end dates are in the same month
    private int sameMonth(int weekends, int addTime, int startDay, int startHour, int startMinute, int endDay, int endHour, int endMinute, int jobTime, int dayTime, int[] daysByMonth) {
        jobTime = ((endDay - startDay) * dayTime)
                + (((endHour * 60) + endMinute) - ((startHour * 60) + startMinute));
        jobTime += addTime;
        //Weekend check
        jobTime = jobTime - (dayTime * 2 * weekends);  
        return jobTime;
    }
    
    //Takes the information in sortedData and puts them in numericaly order 
    //and stores it in the list orderedData (it's a field)
    private void orderData() {
        //Transferring data from sortedData to orderedData
        orderedData = new ArrayList<String>();
        for(int i = 0; i < sortedData.size(); i++) {
            orderedData.add(sortedData.get(i));
        }
        
        for(int i = 0; i < orderedData.size(); i++) {
            for(int j = i + 1; j < orderedData.size(); j++) {
                if(orderedData.get(i).split("--")[0].compareTo(orderedData.get(j).split("--")[0]) > 0) {
                    String temp = orderedData.get(i);
                    orderedData.set(i, orderedData.get(j));
                    orderedData.set(j, temp);
                }
            }
        }
    }
    
    
    //Syntax is first string is the customerName, partNumber, etc. and second string is the data to compare it to
    //NOTE: if first string is "" then automatically passes the test
    private boolean compare(String str1, String str2) {
        if(str1.equals("")) {
            return true;
        } else if(str1.equalsIgnoreCase(str2)) {
            return true;
        } else {
            return false;
        }
    }
    
    private boolean comparePart(String str1, String str2) {
        if(str1.equals("PART#: ")) {
            return true;
        } else if(str1.equalsIgnoreCase(str2)) {
            return true;
        } else {
            return false;
        }
    }
    
    //Checks if the check box is selected and returns the text if so, if not returns blank string
    private String checkBoxText(JCheckBox box) {
        if(box.isSelected()) {
            return box.getText().trim() + " ";
        } else {
            return "";
        }
    }
    
    //Transfers the data stored in the text file to a giant List
    private void dataToList() {
        rawData = new ArrayList<String>();
        try{
            String destination = "";
            String userName = System.getProperty("user.name");
            destination = "C:/Users/" + userName + "/jobAnalyzerDataStorage.txt";
            Scanner input = new Scanner(new File(destination));
            while(input.hasNextLine()) {
                String text = input.nextLine();
                if(text.length() != 0) {
                    rawData.add(text);
                }
            }
        } catch (IOException e) {
            backButton.setText(e.toString());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(parameterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(parameterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(parameterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(parameterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new parameterWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox checkBoxBT;
    private javax.swing.JCheckBox checkBoxHT;
    private javax.swing.JCheckBox checkBoxME;
    private javax.swing.JCheckBox checkBoxMT;
    private javax.swing.JCheckBox checkBoxPR;
    private javax.swing.JCheckBox checkBoxPT;
    private javax.swing.JCheckBox checkBoxRT;
    private javax.swing.JCheckBox checkBoxTT;
    private javax.swing.JCheckBox checkBoxVT;
    private javax.swing.JComboBox<String> colorComboBox;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JTextField customerField;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JLabel customerLabel1;
    private javax.swing.JLabel endMiniDay;
    private javax.swing.JLabel endMiniMonth;
    private javax.swing.JLabel endMiniYear;
    private javax.swing.JButton generateButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextField partField;
    private javax.swing.JLabel partLabel;
    private javax.swing.JCheckBox saveCheckBox;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTextField startDayField1;
    private javax.swing.JTextField startDayField2;
    private javax.swing.JLabel startMiniDay;
    private javax.swing.JLabel startMiniMonth;
    private javax.swing.JLabel startMiniYear;
    private javax.swing.JTextField startMonthField1;
    private javax.swing.JTextField startMonthField2;
    private javax.swing.JTextField startYearField1;
    private javax.swing.JTextField startYearField2;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel welcomeHeader;
    // End of variables declaration//GEN-END:variables
    //Declaring my own fields
    private List<String> rawData;
    private List<String> sortedData;
    private List<String> orderedData;
    private List<Integer> minutes;
    private int[] movingRanges;
    //End of my fields
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("graphIcon.png")));
    }
}
